version: "3.9"
services:

###########################################################################
############################# POSTGRES ################################
###########################################################################
# TODO: make one postgres service for all needs

###########################################################################
############################# DATA MANAGER ################################
###########################################################################
  data_manager_postgres:
    image: postgres:15.3-alpine
    container_name: data_manager_postgres
    env_file:
      - .env    
    environment:
      - POSTGRES_DB=${POSTGRES_DATAMANAGER_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - ${POSTGRES_PORT}
    volumes:
       - postgres_datamanager:/var/lib/postgresql/data
    networks:
      - inner
    command:
      - postgres
      - -c
      - max_connections=150
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USER}"]
    profiles:
      - all
      - data_manager
  
  data_manager_adminer:
    # http://127.0.0.1:8080
    container_name: data_manager_adminer
    image: adminer:latest
    restart: always
    env_file:
      - .env
    environment:
      ADMINER_DEFAULT_SERVER: data_manager_postgres
      ADMINER_DESIGN: nette
    ports:
      - ${DATA_MANAGER_ADMINER_PORT}:${DATA_MANAGER_ADMINER_PORT}
    networks:
      - inner
    depends_on:
      data_manager_postgres:
        condition: service_started
    profiles:
      - all 
      - data_manager

  data_manager_app:
    container_name: data_manager_app
    build: ./data_manager/.
    environment:
      SQLALCHEMY_DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@data_manager_postgres:${POSTGRES_PORT}/${POSTGRES_DATAMANAGER_DB}
    env_file:
      - .env
    networks:
      - inner
      - common
    depends_on:
      data_manager_postgres:
        condition: service_healthy
    profiles:
      - all
      - data_manager

###########################################################################
############################# API MANAGER #################################
###########################################################################
  api-manager:
    container_name: ${API_MANAGER_CONTAINER_NAME}
    build: ./api_manager
    restart: always
    networks:
      - common
    env_file:
      - .env
    expose:
      - ${API_MANAGER_DOCKER_PORT}
    ports:
      - ${API_MANAGER_DOCKER_PORT}:8000
    profiles:
      - all
      - api
###########################################################################
############################# PREFECT #####################################
###########################################################################
  prefect_postgres:
    image: postgres:15.3-alpine
    container_name: prefect_postgres
    env_file:
      - .env
    restart: always
    networks:
      - common
    command:
      - postgres
      - -c
      - max_connections=150
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_PREFECT_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
    expose:
      - ${POSTGRES_PORT}
    volumes:
      - postgres_prefect:/var/lib/postgresql/data
    profiles:
      - all
      - server

  ### Prefect Server API and UI
  prefect_server:
    container_name: prefect_server
    build: ./orchestration/server/.
    restart: always
    networks:
      - common
    env_file:
      - .env
    volumes:
      - prefect_data:/root/.prefect
      - prefect_flows:/flows
    entrypoint: ["./startup_server.sh"]
    # command: prefect config set PREFECT_API_URL=http://${PREFECT_API_IP}:${PREFECT_API_PORT}/api
    environment:
      # If you want to access Prefect Server from anywhere other than the Docker host machine, you will need to change
      # PREFECT_UI_URL to match the external hostname/IP used to load the UI in your web browser.
      # PREFECT_UI_URL: http://127.0.0.0:4200/api
      PREFECT_API_URL: http://${PREFECT_API_IP}:${PREFECT_API_PORT}/api
      PREFECT_SERVER_API_HOST: 0.0.0.0
      PREFECT_SERVER_ANALYTICS_ENABLED: "false"
      PREFECT_LOGGING_SERVER_LEVEL: WARNING
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@prefect_postgres:${POSTGRES_PORT}/${POSTGRES_PREFECT_DB}
    ports:
      - ${PREFECT_API_PORT}:${PREFECT_API_PORT}
    depends_on:
      prefect_postgres:
        condition: service_started
    profiles:
      - all
      - server

    ## Prefect Agent
  prefect_agent:
    build: ./orchestration/agent/.
    restart: always
    networks:
      - common
    env_file:
      - .env
    entrypoint: ["/opt/prefect/entrypoint.sh", "prefect", "agent", "start", "-q", "default"]
    environment:
      - PREFECT_API_URL=http://prefect_server:${PREFECT_API_PORT}/api
    depends_on:
      prefect_server:
        condition: service_started
    profiles:
      - all
      - agent

volumes:
  postgres_prefect: 
  postgres_datamanager:
  prefect_data:
  prefect_flows:
networks:
  common:
    name: common
    # external: true
  inner:

